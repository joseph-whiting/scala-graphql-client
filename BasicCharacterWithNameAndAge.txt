
import scala.concurrent._
import ExecutionContext.Implicits.global
class EmptyType {}
object Client {
  def send[A](query: Query[A]) = Future {
    query.parseResponse("")
  }
}
abstract trait AbstractQuery[A] {
  def generateQuery(): String
  def parseResponse(response: String): A
}

class Query[A](inner: AbstractQuery[A]) extends AbstractQuery[A] {
  def generateQuery() = inner.generateQuery()
  def parseResponse(response: String) = inner.parseResponse(response)
}
class EmptyQuery extends AbstractQuery[EmptyType] {
  def generateQuery() = ""
  def parseResponse(response: String) = new EmptyType()
}
def query[A](inner: AbstractQuery[A]) = new Query(inner)

class CharacterQuery[A, B](fields: AbstractCharacterFieldQuery[A])(inner: AbstractQuery[B]) extends AbstractQuery[TypedWithCharacter[A, B]] {
    def generateQuery() = ""
    def parseResponse(response: String) = inner.parseResponse(response) :: new WithCharacter[A]()
  }
class WithCharacter[A] {
  implicit def innerObject[B](outer: TypedWithCharacter[A, B]): B = outer.inner
  def ::[B](typed: B) = new TypedWithCharacter[A, B](typed)
}
class TypedWithCharacter[A, B] (val inner: B) extends Character[A]
trait Character[A] {
  var character: Seq[A] = Seq()
}
abstract class AbstractCharacterFieldQuery[A] extends AbstractQuery[A]

class CharacterFieldQuery[A, B](inner: AbstractQuery[A])(field: CharacterField[A, B]) extends AbstractCharacterFieldQuery[B] {
  def name() = new CharacterFieldQuery(this)(new NameField[B]())
  def age() = new CharacterFieldQuery(this)(new AgeField[B]())
  def generateQuery() = field.name // or something like that
  def parseResponse(response: String) = field.addTrait(inner.parseResponse(response))
}

abstract class CharacterField[A, B] {
  def name: String
  def addTrait(innerParseResult: A): B
}

object WithName {
  implicit def innerObject[T](outer: TypedWithName[T]): T = outer.inner
  def ::[T](typed: T) = new TypedWithName[T](typed)
  class TypedWithName[T](val inner: T) extends Name

}
trait Name {
  var name: String = ""
}
class NameField[A] extends CharacterField[A, WithName.TypedWithName[A]] {
    def name = "name"
    def addTrait(innerParseResult: A) = innerParseResult :: WithName
  }


object WithAge {
  implicit def innerObject[T](outer: TypedWithAge[T]): T = outer.inner
  def ::[T](typed: T) = new TypedWithAge[T](typed)
  class TypedWithAge[T](val inner: T) extends Age

}
trait Age {
  var age: Int = 0
}
class AgeField[A] extends CharacterField[A, WithAge.TypedWithAge[A]] {
    def name = "age"
    def addTrait(innerParseResult: A) = innerParseResult :: WithAge
  }


def character[A]()(fields: AbstractCharacterFieldQuery[A]) = new CharacterQuery(fields)(new EmptyQuery())
  def name = new CharacterFieldQuery(new EmptyQuery())(new NameField[EmptyType]())
  def age = new CharacterFieldQuery(new EmptyQuery())(new AgeField[EmptyType]())
